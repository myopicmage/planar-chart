// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using planar.server.Models;

namespace planar.server.Migrations
{
    [DbContext(typeof(PlanarContext))]
    [Migration("20200713192505_initial")]
    partial class initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "5.0.0-preview.6.20312.4");

            modelBuilder.Entity("planar.server.Models.Buff", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Locationid")
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Planeid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("locked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("revealed")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("Locationid");

                    b.HasIndex("Planeid");

                    b.ToTable("buffs");
                });

            modelBuilder.Entity("planar.server.Models.Character", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("LocationId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("locked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<string>("race")
                        .HasColumnType("TEXT");

                    b.Property<bool>("revealed")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("LocationId");

                    b.ToTable("characters");
                });

            modelBuilder.Entity("planar.server.Models.Location", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long>("PlaneId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("locked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("revealed")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("locations");
                });

            modelBuilder.Entity("planar.server.Models.Plane", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<bool>("locked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("revealed")
                        .HasColumnType("INTEGER");

                    b.Property<int>("ring")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.ToTable("planes");
                });

            modelBuilder.Entity("planar.server.Models.Quest", b =>
                {
                    b.Property<long>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<long?>("Locationid")
                        .HasColumnType("INTEGER");

                    b.Property<string>("description")
                        .HasColumnType("TEXT");

                    b.Property<long?>("giverid")
                        .HasColumnType("INTEGER");

                    b.Property<bool>("locked")
                        .HasColumnType("INTEGER");

                    b.Property<string>("name")
                        .HasColumnType("TEXT");

                    b.Property<bool>("revealed")
                        .HasColumnType("INTEGER");

                    b.Property<string>("reward")
                        .HasColumnType("TEXT");

                    b.Property<int>("status")
                        .HasColumnType("INTEGER");

                    b.HasKey("id");

                    b.HasIndex("Locationid");

                    b.HasIndex("giverid");

                    b.ToTable("quests");
                });

            modelBuilder.Entity("planar.server.Models.Buff", b =>
                {
                    b.HasOne("planar.server.Models.Location", null)
                        .WithMany("buffs")
                        .HasForeignKey("Locationid");

                    b.HasOne("planar.server.Models.Plane", null)
                        .WithMany("buffs")
                        .HasForeignKey("Planeid");
                });

            modelBuilder.Entity("planar.server.Models.Character", b =>
                {
                    b.HasOne("planar.server.Models.Location", null)
                        .WithMany("characters")
                        .HasForeignKey("LocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("planar.server.Models.Quest", b =>
                {
                    b.HasOne("planar.server.Models.Location", null)
                        .WithMany("quests")
                        .HasForeignKey("Locationid");

                    b.HasOne("planar.server.Models.Character", "giver")
                        .WithMany()
                        .HasForeignKey("giverid");
                });
#pragma warning restore 612, 618
        }
    }
}
